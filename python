#!/usr/bin/env python3
import http.server
import socketserver
import json
import webbrowser
from datetime import datetime, timedelta
import os
import urllib.parse

# Mock data storage (in a real app, we would use a database)
class MemStorage:
    def __init__(self):
        self.users = {
            1: {
                "id": 1,
                "username": "demo",
                "firstName": "Alex",
                "lastName": "Johnson",
                "email": "alex@example.com",
                "phone": "+1 (555) 123-4567"
            }
        }
        
        self.health_data = [
            {"id": 1, "userId": 1, "type": "heartRate", "value": 72, "timestamp": (datetime.now() - timedelta(hours=1)).isoformat()},
            {"id": 2, "userId": 1, "type": "heartRate", "value": 75, "timestamp": (datetime.now() - timedelta(hours=2)).isoformat()},
            {"id": 3, "userId": 1, "type": "heartRate", "value": 70, "timestamp": (datetime.now() - timedelta(hours=3)).isoformat()},
            {"id": 4, "userId": 1, "type": "steps", "value": 8472, "timestamp": datetime.now().isoformat()}
        ]
        
        self.water_intakes = [
            {"id": 1, "userId": 1, "amount": 250, "timestamp": (datetime.now() - timedelta(hours=4)).isoformat()},
            {"id": 2, "userId": 1, "amount": 350, "timestamp": (datetime.now() - timedelta(hours=2)).isoformat()},
            {"id": 3, "userId": 1, "amount": 200, "timestamp": (datetime.now() - timedelta(hours=1)).isoformat()},
            {"id": 4, "userId": 1, "amount": 400, "timestamp": datetime.now().isoformat()}
        ]
        
        self.fitness_goals = [
            {"id": 1, "userId": 1, "name": "Daily Steps", "target": 10000, "current": 8472, "unit": "steps", "icon": "steps", "color": "#059669"},
            {"id": 2, "userId": 1, "name": "Calories Burned", "target": 500, "current": 310, "unit": "kcal", "icon": "flame", "color": "#d97706"},
            {"id": 3, "userId": 1, "name": "Active Minutes", "target": 60, "current": 26, "unit": "min", "icon": "clock", "color": "#4f46e5"}
        ]
        
        self.reminders = [
            {"id": 1, "userId": 1, "title": "Blood Pressure Medicine", "description": "1 pill", "time": "09:00", "type": "medication", "isCompleted": False},
            {"id": 2, "userId": 1, "title": "Drink Water", "description": "250ml", "time": "11:00", "type": "water", "isCompleted": False}
        ]
        
        self.emergency_contacts = [
            {"id": 1, "userId": 1, "name": "John Smith", "phone": "+1 (555) 123-4567", "relationship": "Family"},
            {"id": 2, "userId": 1, "name": "Dr. Maria Davis", "phone": "+1 (555) 987-6543", "relationship": "Doctor"}
        ]
        
    def get_user(self, user_id):
        return self.users.get(user_id)
    
    def get_health_data(self, user_id, data_type=None):
        if data_type:
            return [data for data in self.health_data if data["userId"] == user_id and data["type"] == data_type]
        return [data for data in self.health_data if data["userId"] == user_id]
    
    def get_water_intakes(self, user_id):
        return [intake for intake in self.water_intakes if intake["userId"] == user_id]
    
    def get_total_water_intake(self, user_id):
        intakes = self.get_water_intakes(user_id)
        return sum(intake["amount"] for intake in intakes)
    
    def get_fitness_goals(self, user_id):
        return [goal for goal in self.fitness_goals if goal["userId"] == user_id]
    
    def get_reminders(self, user_id, reminder_type=None):
        if reminder_type:
            return [reminder for reminder in self.reminders if reminder["userId"] == user_id and reminder["type"] == reminder_type]
        return [reminder for reminder in self.reminders if reminder["userId"] == user_id]
    
    def get_emergency_contacts(self, user_id):
        return [contact for contact in self.emergency_contacts if contact["userId"] == user_id]


# Initialize storage
storage = MemStorage()

# Helper functions
def calculate_progress(current, target):
    return int((current / target) * 100) if target > 0 else 0

# HTML template for the application
HTML_TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HealthSync - Python No Flask</title>
    <style>
        :root {
            --primary-color: #3B82F6;
            --primary-light: #93C5FD;
            --success-color: #10B981;
            --warning-color: #F59E0B;
            --danger-color: #EF4444;
            --text-color: #1F2937;
            --text-light: #6B7280;
            --bg-color: #F9FAFB;
            --card-bg: #FFFFFF;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen,
                Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background-color: var(--bg-color);
            padding: 0;
            margin: 0;
        }
        
        .container {
            display: flex;
            min-height: 100vh;
        }
        
        .sidebar {
            width: 250px;
            background-color: var(--card-bg);
            border-right: 1px solid #e5e7eb;
            padding: 20px 10px;
            display: flex;
            flex-direction: column;
        }
        
        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }
        
        .app-title {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--primary-color);
            margin-bottom: 30px;
            padding: 0 10px;
            display: flex;
            align-items: center;
        }
        
        .app-title svg {
            margin-right: 10px;
        }
        
        .nav-list {
            list-style: none;
        }
        
        .nav-item {
            margin-bottom: 5px;
        }
        
        .nav-link {
            display: flex;
            align-items: center;
            padding: 10px;
            border-radius: 6px;
            color: var(--text-color);
            text-decoration: none;
            transition: background-color 0.2s;
        }
        
        .nav-link:hover {
            background-color: #f3f4f6;
        }
        
        .nav-link.active {
            background-color: #ebf5ff;
            color: var(--primary-color);
            font-weight: 500;
        }
        
        .nav-link svg {
            margin-right: 10px;
        }
        
        .sos-button {
            margin-top: auto;
            padding: 12px;
            background-color: #fee2e2;
            color: #ef4444;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .sos-button:hover {
            background-color: #fecaca;
        }
        
        .sos-button svg {
            margin-right: 8px;
        }
        
        .page-title {
            font-size: 1.5rem;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .page-subtitle {
            color: var(--text-light);
            margin-bottom: 20px;
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 16px;
            overflow: hidden;
        }
        
        .card-welcome {
            padding: 20px;
            margin-bottom: 20px;
        }
        
        .welcome-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .on-track-badge {
            display: inline-flex;
            align-items: center;
            background-color: #ecfdf5;
            color: #059669;
            padding: 4px 10px;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 500;
        }
        
        .grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 16px;
        }
        
        @media (min-width: 768px) {
            .grid-cols-2 {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .grid-cols-3 {
                grid-template-columns: repeat(3, 1fr);
            }
        }
        
        .card-header {
            padding: 16px;
            border-bottom: 1px solid #f3f4f6;
            font-weight: 600;
        }
        
        .card-content {
            padding: 16px;
        }
        
        .metric-card {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            padding: 20px;
        }
        
        .metric-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 12px;
        }
        
        .heart-rate-icon {
            background-color: #fee2e2;
            color: #ef4444;
        }
        
        .steps-icon {
            background-color: #d1fae5;
            color: #059669;
        }
        
        .water-icon {
            background-color: #e0f2fe;
            color: #0284c7;
        }
        
        .metric-value {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 4px;
        }
        
        .metric-label {
            color: var(--text-light);
            font-size: 0.875rem;
        }
        
        .goal-card {
            padding: 16px;
            border-left: 4px solid var(--primary-color);
        }
        
        .goal-header {
            display: flex;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .goal-icon {
            width: 36px;
            height: 36px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
        }
        
        .steps-goal-icon {
            background-color: #d1fae5;
            color: #059669;
        }
        
        .calories-goal-icon {
            background-color: #fef3c7;
            color: #d97706;
        }
        
        .active-goal-icon {
            background-color: #e0e7ff;
            color: #4f46e5;
        }
        
        .goal-info h3 {
            font-weight: 600;
            margin-bottom: 2px;
        }
        
        .goal-info p {
            color: var(--text-light);
            font-size: 0.875rem;
        }
        
        .progress-bar {
            height: 8px;
            background-color: #e5e7eb;
            border-radius: 4px;
            margin-bottom: 8px;
            overflow: hidden;
        }
        
        .progress-value {
            height: 100%;
            border-radius: 4px;
        }
        
        .steps-progress {
            background-color: #059669;
        }
        
        .calories-progress {
            background-color: #d97706;
        }
        
        .active-progress {
            background-color: #4f46e5;
        }
        
        .progress-labels {
            display: flex;
            justify-content: space-between;
            font-size: 0.75rem;
            color: var(--text-light);
        }
        
        .reminder-card {
            padding: 16px;
            display: flex;
            align-items: center;
            border-left: 4px solid var(--primary-color);
        }
        
        .reminder-icon {
            width: 40px;
            height: 40px;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 16px;
            flex-shrink: 0;
        }
        
        .medication-icon {
            background-color: #fff7ed;
            color: #ea580c;
        }
        
        .water-reminder-icon {
            background-color: #e0f2fe;
            color: #0284c7;
        }
        
        .reminder-info {
            flex: 1;
        }
        
        .reminder-info h3 {
            font-weight: 600;
            margin-bottom: 2px;
        }
        
        .reminder-info p {
            color: var(--text-light);
            font-size: 0.875rem;
        }
        
        .reminder-time {
            background-color: #f3f4f6;
            color: var(--text-color);
            padding: 4px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            margin-left: 8px;
        }
        
        .contact-card {
            padding: 16px;
            display: flex;
            align-items: center;
        }
        
        .contact-avatar {
            width: 40px;
            height: 40px;
            border-radius: 9999px;
            background-color: #e0f2fe;
            color: #0284c7;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 16px;
            flex-shrink: 0;
        }
        
        .contact-info {
            flex: 1;
        }
        
        .contact-info h3 {
            font-weight: 600;
            margin-bottom: 2px;
        }
        
        .contact-info p {
            color: var(--text-light);
            font-size: 0.875rem;
        }
        
        .button {
            display: inline-flex;
            align-items: center;
            padding: 8px 16px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        
        .button:hover {
            background-color: #2563eb;
        }
        
        .button svg {
            margin-right: 8px;
        }
        
        .button-outline {
            background-color: transparent;
            color: var(--primary-color);
            border: 1px solid #e5e7eb;
        }
        
        .button-outline:hover {
            background-color: #f3f4f6;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            align-items: center;
            justify-content: center;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            border-radius: 8px;
            width: 90%;
            max-width: 500px;
            padding: 24px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 16px;
        }
        
        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }
        
        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--text-light);
        }
        
        .form-group {
            margin-bottom: 16px;
        }
        
        .form-label {
            display: block;
            font-weight: 500;
            margin-bottom: 4px;
        }
        
        .form-input {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #e5e7eb;
            border-radius: 6px;
            font-size: 1rem;
        }
        
        .form-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
        }
        
        .form-actions {
            display: flex;
            justify-content: flex-end;
            gap: 8px;
            margin-top: 24px;
        }
        
        @media (max-width: 768px) {
            .container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                border-right: none;
                border-bottom: 1px solid #e5e7eb;
                padding: 16px;
            }
            
            .nav-list {
                display: flex;
                overflow-x: auto;
                padding-bottom: 10px;
            }
            
            .nav-item {
                margin-right: 10px;
                margin-bottom: 0;
            }
            
            .sos-button {
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <aside class="sidebar">
            <div class="app-title">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 12h-4l-3 9L9 3l-3 9H2"></path>
                </svg>
                HealthSync
            </div>
            
            <ul class="nav-list">
                <li class="nav-item">
                    <a href="/" class="nav-link active">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect x="3" y="3" width="7" height="7"></rect>
                            <rect x="14" y="3" width="7" height="7"></rect>
                            <rect x="14" y="14" width="7" height="7"></rect>
                            <rect x="3" y="14" width="7" height="7"></rect>
                        </svg>
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/heart-rate" class="nav-link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z"></path>
                        </svg>
                        Heart Rate
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/fitness-goals" class="nav-link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <rect width="20" height="14" x="2" y="5" rx="2" />
                            <path d="M2 10h20" />
                        </svg>
                        Fitness Goals
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/water-intake" class="nav-link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z" />
                        </svg>
                        Water Intake
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/medications" class="nav-link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12" />
                            <circle cx="17" cy="7" r="5" />
                        </svg>
                        Medications
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/profile" class="nav-link">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="8" r="5" />
                            <path d="M20 21a8 8 0 0 0-16 0" />
                        </svg>
                        Profile
                    </a>
                </li>
            </ul>
            
            <button id="sosButton" class="sos-button">
                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
                </svg>
                SOS Emergency
            </button>
        </aside>
        
        <main class="main-content">
            <div class="card card-welcome">
                <div class="welcome-header">
                    <h1 class="page-title">Welcome, {first_name}!</h1>
                    <span class="on-track-badge">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 4px;">
                            <polyline points="20 6 9 17 4 12"></polyline>
                        </svg>
                        On Track
                    </span>
                </div>
                <p class="page-subtitle">Here's your health overview for today</p>
            </div>
            
            <div class="grid grid-cols-3">
                <div class="card metric-card">
                    <div class="metric-icon heart-rate-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M20.42 4.58a5.4 5.4 0 0 0-7.65 0l-.77.78-.77-.78a5.4 5.4 0 0 0-7.65 0C1.46 6.7 1.33 10.28 4 13l8 8 8-8c2.67-2.72 2.54-6.3.42-8.42z"></path>
                        </svg>
                    </div>
                    <div class="metric-value">{heart_rate} BPM</div>
                    <div class="metric-label">Heart Rate</div>
                </div>
                
                <div class="card metric-card">
                    <div class="metric-icon steps-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <circle cx="12" cy="5" r="1" />
                            <path d="m9 20 3-6 3 6" />
                            <path d="m6 8 6 2 6-2" />
                            <path d="M12 10v4" />
                        </svg>
                    </div>
                    <div class="metric-value">{steps:,}</div>
                    <div class="metric-label">Steps Today</div>
                </div>
                
                <div class="card metric-card">
                    <div class="metric-icon water-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z" />
                        </svg>
                    </div>
                    <div class="metric-value">{water_intake:.1f} L</div>
                    <div class="metric-label">Water Intake</div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">Daily Fitness Goals</div>
                <div class="card-content">
                    {goals_html}
                </div>
            </div>
            
            <div class="grid grid-cols-2">
                <div class="card">
                    <div class="card-header">Today's Reminders</div>
                    <div class="card-content">
                        {reminders_html}
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-header">Emergency Contacts</div>
                    <div class="card-content">
                        {contacts_html}
                    </div>
                </div>
            </div>
        </main>
    </div>
    
    <!-- SOS Confirmation Modal -->
    <div id="sosModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <div class="modal-title">Emergency SOS</div>
                <button class="close-modal">&times;</button>
            </div>
            <p>This will send an emergency alert to all your emergency contacts. Are you sure you want to proceed?</p>
            <div class="form-actions">
                <button class="button button-outline cancel-sos">Cancel</button>
                <button class="button confirm-sos">Send SOS Alert</button>
            </div>
        </div>
    </div>
    
    <script>
        // Demo JavaScript
        document.addEventListener('DOMContentLoaded', function() {
            // SOS Modal functionality
            const sosButton = document.getElementById('sosButton');
            const sosModal = document.getElementById('sosModal');
            const closeModal = document.querySelector('.close-modal');
            const cancelSos = document.querySelector('.cancel-sos');
            const confirmSos = document.querySelector('.confirm-sos');
            
            // Open modal
            sosButton.addEventListener('click', function() {
                sosModal.style.display = 'flex';
            });
            
            // Close modal functions
            function closeSosModal() {
                sosModal.style.display = 'none';
            }
            
            closeModal.addEventListener('click', closeSosModal);
            cancelSos.addEventListener('click', closeSosModal);
            
            // SOS confirmation
            confirmSos.addEventListener('click', function() {
                // Send an API request to our backend
                fetch('/api/sos', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        userId: 1
                    }),
                })
                .then(response => response.json())
                .then(data => {
                    alert('Emergency alert sent to your contacts!');
                    closeSosModal();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Failed to send emergency alert. Please try again.');
                });
            });
            
            // Close modal if clicking outside
            window.addEventListener('click', function(event) {
                if (event.target === sosModal) {
                    closeSosModal();
                }
            });
        });
    </script>
</body>
</html>
"""

class HealthSyncHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        # Parse the URL path
        parsed_path = urllib.parse.urlparse(self.path)
        path = parsed_path.path

        # API endpoints
        if path.startswith('/api/'):
            self.handle_api_request(path)
            return
        
        # Main route
        if path == '/' or path == '/index.html':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            # Get data
            user_id = 1  # Demo user
            user = storage.get_user(user_id)
            
            # Get health data
            heart_rate_data = storage.get_health_data(user_id, "heartRate")
            current_heart_rate = heart_rate_data[0]["value"] if heart_rate_data else 0
            
            steps_data = storage.get_health_data(user_id, "steps")
            current_steps = steps_data[0]["value"] if steps_data else 0
            
            # Get water intake
            water_intakes = storage.get_water_intakes(user_id)
            total_water = storage.get_total_water_intake(user_id) / 1000  # Convert to liters
            
            # Get goals
            goals = storage.get_fitness_goals(user_id)
            for goal in goals:
                goal["progress"] = calculate_progress(goal["current"], goal["target"])
            
            # Generate goals HTML
            goals_html = ""
            for goal in goals:
                icon_class = ""
                progress_class = ""
                
                if goal["icon"] == "steps":
                    icon_class = "steps-goal-icon"
                    progress_class = "steps-progress"
                elif goal["icon"] == "flame":
                    icon_class = "calories-goal-icon"
                    progress_class = "calories-progress"
                elif goal["icon"] == "clock":
                    icon_class = "active-goal-icon"
                    progress_class = "active-progress"
                
                goals_html += f"""
                <div class="goal-card">
                    <div class="goal-header">
                        <div class="goal-icon {icon_class}">
                            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <circle cx="12" cy="5" r="1" />
                                <path d="m9 20 3-6 3 6" />
                                <path d="m6 8 6 2 6-2" />
                                <path d="M12 10v4" />
                            </svg>
                        </div>
                        <div class="goal-info">
                            <h3>{goal["name"]}</h3>
                            <p>Target: {goal["target"]:,} {goal["unit"]}</p>
                        </div>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-value {progress_class}" style="width: {goal["progress"]}%"></div>
                    </div>
                    <div class="progress-labels">
                        <span>{goal["current"]:,} {goal["unit"]}</span>
                        <span>{goal["progress"]}%</span>
                    </div>
                </div>
                """
            
            # Get reminders
            reminders = storage.get_reminders(user_id)
            
            # Generate reminders HTML
            reminders_html = ""
            for reminder in reminders:
                icon_class = "medication-icon" if reminder["type"] == "medication" else "water-reminder-icon"
                reminders_html += f"""
                <div class="reminder-card">
                    <div class="reminder-icon {icon_class}">
                        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="m12 8-9.04 9.06a2.82 2.82 0 1 0 3.98 3.98L16 12" />
                            <circle cx="17" cy="7" r="5" />
                        </svg>
                    </div>
                    <div class="reminder-info">
                        <h3>{reminder["title"]}</h3>
                        <p>{reminder["description"]}</p>
                    </div>
                    <span class="reminder-time">{reminder["time"]}</span>
                </div>
                """
            
            # Get emergency contacts
            contacts = storage.get_emergency_contacts(user_id)
            
            # Generate contacts HTML
            contacts_html = ""
            for contact in contacts:
                initials = "".join([name[0] for name in contact["name"].split(" ")[:2]])
                contacts_html += f"""
                <div class="contact-card">
                    <div class="contact-avatar">{initials}</div>
                    <div class="contact-info">
                        <h3>{contact["name"]}</h3>
                        <p>{contact["relationship"]} • {contact["phone"]}</p>
                    </div>
                </div>
                """
            
            # Fill in template
            html = HTML_TEMPLATE.format(
                first_name=user["firstName"],
                heart_rate=current_heart_rate,
                steps=current_steps,
                water_intake=total_water,
                goals_html=goals_html,
                reminders_html=reminders_html,
                contacts_html=contacts_html
            )
            
            self.wfile.write(html.encode())
            return
        
        # For other routes, serve static files or return 404
        self.send_error(404, "File not found")
    
    def do_POST(self):
        # Handle POST requests (e.g., SOS button)
        if self.path == '/api/sos':
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            
            try:
                # Parse JSON data
                data = json.loads(post_data.decode('utf-8'))
                user_id = data.get('userId', 1)
                
                # Get emergency contacts
                contacts = storage.get_emergency_contacts(user_id)
                
                # Simulate sending SOS messages
                messages_sent = []
                for contact in contacts:
                    messages_sent.append({
                        "contact": contact["name"],
                        "status": "sent",
                        "timestamp": datetime.now().isoformat()
                    })
                
                # Send the response
                response = {
                    "success": True,
                    "message": "SOS alert sent to emergency contacts",
                    "messagesSent": messages_sent
                }
                
                self.send_response(200)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps(response).encode())
            except Exception as e:
                self.send_response(400)
                self.send_header('Content-type', 'application/json')
                self.end_headers()
                self.wfile.write(json.dumps({"error": str(e)}).encode())
            
            return
        
        # For other routes, return 404
        self.send_error(404, "File not found")
    
    def handle_api_request(self, path):
        # Extract the endpoint part after '/api/'
        endpoint = path[5:]  # Skip first 5 chars ('/api/')
        
        # Default user_id for demo
        user_id = 1
        
        # Handle different API routes
        if endpoint.startswith('user/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            user = storage.get_user(user_id)
            
            if user:
                self.send_json_response(user)
            else:
                self.send_json_response({"error": "User not found"}, 404)
                
        elif endpoint.startswith('health-data/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            
            # Get query parameters if any
            query_params = urllib.parse.parse_qs(urllib.parse.urlparse(self.path).query)
            data_type = query_params.get('type', [None])[0]
            
            data = storage.get_health_data(user_id, data_type)
            self.send_json_response(data)
            
        elif endpoint.startswith('water-intakes/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            
            intakes = storage.get_water_intakes(user_id)
            total = storage.get_total_water_intake(user_id)
            self.send_json_response({"intakes": intakes, "total": total})
            
        elif endpoint.startswith('fitness-goals/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            
            goals = storage.get_fitness_goals(user_id)
            self.send_json_response(goals)
            
        elif endpoint.startswith('reminders/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            
            # Get query parameters if any
            query_params = urllib.parse.parse_qs(urllib.parse.urlparse(self.path).query)
            reminder_type = query_params.get('type', [None])[0]
            
            reminders = storage.get_reminders(user_id, reminder_type)
            self.send_json_response(reminders)
            
        elif endpoint.startswith('emergency-contacts/'):
            # Parse user_id from URL
            user_id = int(endpoint.split('/')[-1])
            
            contacts = storage.get_emergency_contacts(user_id)
            self.send_json_response(contacts)
            
        else:
            self.send_json_response({"error": "API endpoint not found"}, 404)
    
    def send_json_response(self, data, status=200):
        self.send_response(status)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(data).encode())

def run_server(port=8000):
    """Start the HTTP server on the specified port"""
    server_address = ('', port)
    httpd = socketserver.ThreadingTCPServer(server_address, HealthSyncHandler)
    print(f"Starting HealthSync Python server on port {port}...")
    print(f"Open http://localhost:{port} in your browser")
    
    # Attempt to open a browser
    webbrowser.open(f"http://localhost:{port}")
    
    # Start the server
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nShutting down the server...")
        httpd.server_close()
        print("Server shut down successfully")

if __name__ == "__main__":
    run_server()
